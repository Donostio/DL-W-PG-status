name: Update Tube Status

# This schedule runs every 10 minutes (at :00, :10, :20, :30, :40, :50 minutes past the hour).
# This is the "timer" that you asked for.
on:
  schedule:
    # The cron string '*/10 * * * *' sets the 10-minute interval.
    - cron: '*/10 * * * *'
  # Allows you to manually trigger the update from the Actions tab
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest

    # Permission is needed to commit changes (the updated status_data.json file) back to the repository.
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq (JSON processor)
        # 'jq' is necessary to parse the JSON response from your Google Apps Script.
        run: sudo apt-get install jq -y
          
      - name: Fetch and Update Status
        id: fetch
        run: |
          # The APPS_SCRIPT_URL is retrieved from the repository secrets for security.
          # YOU MUST set the secret named APPS_SCRIPT_URL in your repo settings.
          APPS_SCRIPT_URL="${{ secrets.APPS_SCRIPT_URL }}"
          
          # 1. Fetch data from your Google Apps Script
          RESPONSE=$(curl -s $APPS_SCRIPT_URL)
          
          # 2. Extract status and reason using jq
          STATUS=$(echo $RESPONSE | jq -r '.status')
          REASON=$(echo $RESPONSE | jq -r '.reason // ""') # Use empty string if reason is null

          # 3. Create or overwrite the static JSON file that your website reads
          echo "{\"status\": \"$STATUS\", \"reason\": \"$REASON\"}" > status_data.json
          
          # Check if the file changed from the version currently in the repo
          if git diff --exit-code status_data.json; then
            echo "::set-output name=files_changed::false"
          else
            echo "::set-output name=files_changed::true"
          fi
        
      - name: Commit and Push changes
        # Only commit and push if the previous step detected a change in the status
        if: steps.fetch.outputs.files_changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add status_data.json
          git commit -m "Automated status update via cron"
          git push
