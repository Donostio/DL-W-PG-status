name: Update Tube Status

# This schedule runs every 10 minutes (at :00, :10, :20, :30, :40, :50 minutes past the hour)
on:
  schedule:
    - cron: '*/10 * * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies (if you use any, otherwise skip)
        # Assuming you'd use a small script to fetch/update
        # run: npm install

      - name: Fetch and Update Status
        id: fetch
        run: |
          # The Apps Script URL is being stored as a GitHub Secret for security.
          APPS_SCRIPT_URL="${{ secrets.APPS_SCRIPT_URL }}"
          
          # Fetch data from your Google Apps Script
          RESPONSE=$(curl -s $APPS_SCRIPT_URL)
          
          STATUS=$(echo $RESPONSE | jq -r '.status')
          REASON=$(echo $RESPONSE | jq -r '.reason // ""') # Use empty string if reason is null

          # Define the file to update (e.g., a JSON file for the status)
          # A simpler approach is to update a single file that contains the status.
          # For this example, let's update a JSON file that your page will now read.
          
          # 1. Write the new data to a JSON file
          echo "{\"status\": \"$STATUS\", \"reason\": \"$REASON\"}" > status_data.json
          
          # 2. Add an indicator for the time of update
          UPDATE_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "Status updated at: $UPDATE_TIME" >> update_time.txt

          # Check if the files changed
          if git diff --exit-code status_data.json update_time.txt; then
            echo "::set-output name=files_changed::false"
          else
            echo "::set-output name=files_changed::true"
          fi
        # Needs jq to parse JSON response. jq is pre-installed on GitHub Action runners.

      - name: Commit and Push changes
        if: steps.fetch.outputs.files_changed == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add status_data.json update_time.txt
          git commit -m "Automated status update: ${{ github.event.repository.name }} Status"
          git push
